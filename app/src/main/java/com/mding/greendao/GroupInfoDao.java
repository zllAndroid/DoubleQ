package com.mding.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mding.dao.GroupInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_INFO".
*/
public class GroupInfoDao extends AbstractDao<GroupInfo, Long> {

    public static final String TABLENAME = "GROUP_INFO";

    /**
     * Properties of entity GroupInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property GroupId = new Property(2, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupName = new Property(3, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupSno = new Property(4, String.class, "groupSno", false, "GROUP_SNO");
        public final static Property GroupType = new Property(5, String.class, "groupType", false, "GROUP_TYPE");
        public final static Property GroupHeadImg = new Property(6, String.class, "groupHeadImg", false, "GROUP_HEAD_IMG");
        public final static Property GroupInstruction = new Property(7, String.class, "groupInstruction", false, "GROUP_INSTRUCTION");
        public final static Property GroupQrcode = new Property(8, String.class, "groupQrcode", false, "GROUP_QRCODE");
        public final static Property Status = new Property(9, String.class, "status", false, "STATUS");
        public final static Property MaxNum = new Property(10, String.class, "maxNum", false, "MAX_NUM");
        public final static Property NowNum = new Property(11, String.class, "nowNum", false, "NOW_NUM");
        public final static Property CreatedId = new Property(12, String.class, "createdId", false, "CREATED_ID");
        public final static Property Created = new Property(13, String.class, "created", false, "CREATED");
        public final static Property Modified = new Property(14, String.class, "modified", false, "MODIFIED");
    }


    public GroupInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GroupInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"GROUP_ID\" TEXT," + // 2: groupId
                "\"GROUP_NAME\" TEXT," + // 3: groupName
                "\"GROUP_SNO\" TEXT," + // 4: groupSno
                "\"GROUP_TYPE\" TEXT," + // 5: groupType
                "\"GROUP_HEAD_IMG\" TEXT," + // 6: groupHeadImg
                "\"GROUP_INSTRUCTION\" TEXT," + // 7: groupInstruction
                "\"GROUP_QRCODE\" TEXT," + // 8: groupQrcode
                "\"STATUS\" TEXT," + // 9: status
                "\"MAX_NUM\" TEXT," + // 10: maxNum
                "\"NOW_NUM\" TEXT," + // 11: nowNum
                "\"CREATED_ID\" TEXT," + // 12: createdId
                "\"CREATED\" TEXT," + // 13: created
                "\"MODIFIED\" TEXT);"); // 14: modified
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_GROUP_INFO_USER_ID_DESC_GROUP_ID_DESC ON \"GROUP_INFO\"" +
                " (\"USER_ID\" DESC,\"GROUP_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(4, groupName);
        }
 
        String groupSno = entity.getGroupSno();
        if (groupSno != null) {
            stmt.bindString(5, groupSno);
        }
 
        String groupType = entity.getGroupType();
        if (groupType != null) {
            stmt.bindString(6, groupType);
        }
 
        String groupHeadImg = entity.getGroupHeadImg();
        if (groupHeadImg != null) {
            stmt.bindString(7, groupHeadImg);
        }
 
        String groupInstruction = entity.getGroupInstruction();
        if (groupInstruction != null) {
            stmt.bindString(8, groupInstruction);
        }
 
        String groupQrcode = entity.getGroupQrcode();
        if (groupQrcode != null) {
            stmt.bindString(9, groupQrcode);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String maxNum = entity.getMaxNum();
        if (maxNum != null) {
            stmt.bindString(11, maxNum);
        }
 
        String nowNum = entity.getNowNum();
        if (nowNum != null) {
            stmt.bindString(12, nowNum);
        }
 
        String createdId = entity.getCreatedId();
        if (createdId != null) {
            stmt.bindString(13, createdId);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(14, created);
        }
 
        String modified = entity.getModified();
        if (modified != null) {
            stmt.bindString(15, modified);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(4, groupName);
        }
 
        String groupSno = entity.getGroupSno();
        if (groupSno != null) {
            stmt.bindString(5, groupSno);
        }
 
        String groupType = entity.getGroupType();
        if (groupType != null) {
            stmt.bindString(6, groupType);
        }
 
        String groupHeadImg = entity.getGroupHeadImg();
        if (groupHeadImg != null) {
            stmt.bindString(7, groupHeadImg);
        }
 
        String groupInstruction = entity.getGroupInstruction();
        if (groupInstruction != null) {
            stmt.bindString(8, groupInstruction);
        }
 
        String groupQrcode = entity.getGroupQrcode();
        if (groupQrcode != null) {
            stmt.bindString(9, groupQrcode);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String maxNum = entity.getMaxNum();
        if (maxNum != null) {
            stmt.bindString(11, maxNum);
        }
 
        String nowNum = entity.getNowNum();
        if (nowNum != null) {
            stmt.bindString(12, nowNum);
        }
 
        String createdId = entity.getCreatedId();
        if (createdId != null) {
            stmt.bindString(13, createdId);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(14, created);
        }
 
        String modified = entity.getModified();
        if (modified != null) {
            stmt.bindString(15, modified);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupInfo readEntity(Cursor cursor, int offset) {
        GroupInfo entity = new GroupInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupSno
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // groupType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // groupHeadImg
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // groupInstruction
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // groupQrcode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // maxNum
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nowNum
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // createdId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // created
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // modified
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupSno(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroupType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroupHeadImg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroupInstruction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGroupQrcode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMaxNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNowNum(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreatedId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreated(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setModified(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
