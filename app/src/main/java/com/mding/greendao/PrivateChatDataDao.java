package com.mding.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mding.dao.PrivateChatData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRIVATE_CHAT_DATA".
*/
public class PrivateChatDataDao extends AbstractDao<PrivateChatData, Long> {

    public static final String TABLENAME = "PRIVATE_CHAT_DATA";

    /**
     * Properties of entity PrivateChatData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property FriendId = new Property(2, String.class, "friendId", false, "FRIEND_ID");
        public final static Property TotalId = new Property(3, String.class, "totalId", false, "TOTAL_ID");
        public final static Property MessageStoId = new Property(4, String.class, "messageStoId", false, "MESSAGE_STO_ID");
        public final static Property SendId = new Property(5, String.class, "sendId", false, "SEND_ID");
        public final static Property ReceiveId = new Property(6, String.class, "receiveId", false, "RECEIVE_ID");
        public final static Property MessageType = new Property(7, String.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property UserMessageType = new Property(8, int.class, "userMessageType", false, "USER_MESSAGE_TYPE");
        public final static Property Message = new Property(9, String.class, "message", false, "MESSAGE");
        public final static Property ImgUrl = new Property(10, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Created = new Property(11, String.class, "created", false, "CREATED");
    }


    public PrivateChatDataDao(DaoConfig config) {
        super(config);
    }
    
    public PrivateChatDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRIVATE_CHAT_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"FRIEND_ID\" TEXT," + // 2: friendId
                "\"TOTAL_ID\" TEXT," + // 3: totalId
                "\"MESSAGE_STO_ID\" TEXT," + // 4: messageStoId
                "\"SEND_ID\" TEXT," + // 5: sendId
                "\"RECEIVE_ID\" TEXT," + // 6: receiveId
                "\"MESSAGE_TYPE\" TEXT," + // 7: messageType
                "\"USER_MESSAGE_TYPE\" INTEGER NOT NULL ," + // 8: userMessageType
                "\"MESSAGE\" TEXT," + // 9: message
                "\"IMG_URL\" TEXT," + // 10: imgUrl
                "\"CREATED\" TEXT);"); // 11: created
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PRIVATE_CHAT_DATA_USER_ID_DESC_FRIEND_ID_DESC ON \"PRIVATE_CHAT_DATA\"" +
                " (\"USER_ID\" DESC,\"FRIEND_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRIVATE_CHAT_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrivateChatData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
 
        String totalId = entity.getTotalId();
        if (totalId != null) {
            stmt.bindString(4, totalId);
        }
 
        String messageStoId = entity.getMessageStoId();
        if (messageStoId != null) {
            stmt.bindString(5, messageStoId);
        }
 
        String sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindString(6, sendId);
        }
 
        String receiveId = entity.getReceiveId();
        if (receiveId != null) {
            stmt.bindString(7, receiveId);
        }
 
        String messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindString(8, messageType);
        }
        stmt.bindLong(9, entity.getUserMessageType());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(10, message);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(11, imgUrl);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(12, created);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrivateChatData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
 
        String totalId = entity.getTotalId();
        if (totalId != null) {
            stmt.bindString(4, totalId);
        }
 
        String messageStoId = entity.getMessageStoId();
        if (messageStoId != null) {
            stmt.bindString(5, messageStoId);
        }
 
        String sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindString(6, sendId);
        }
 
        String receiveId = entity.getReceiveId();
        if (receiveId != null) {
            stmt.bindString(7, receiveId);
        }
 
        String messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindString(8, messageType);
        }
        stmt.bindLong(9, entity.getUserMessageType());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(10, message);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(11, imgUrl);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(12, created);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PrivateChatData readEntity(Cursor cursor, int offset) {
        PrivateChatData entity = new PrivateChatData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // friendId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // totalId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // messageStoId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sendId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // receiveId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // messageType
            cursor.getInt(offset + 8), // userMessageType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // message
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // imgUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // created
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrivateChatData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFriendId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTotalId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessageStoId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSendId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReceiveId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMessageType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserMessageType(cursor.getInt(offset + 8));
        entity.setMessage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImgUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreated(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PrivateChatData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PrivateChatData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PrivateChatData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
