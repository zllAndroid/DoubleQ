package com.mding.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mding.dao.UserRelation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_RELATION".
*/
public class UserRelationDao extends AbstractDao<UserRelation, Long> {

    public static final String TABLENAME = "USER_RELATION";

    /**
     * Properties of entity UserRelation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property FriendId = new Property(2, String.class, "friendId", false, "FRIEND_ID");
        public final static Property GroupId = new Property(3, String.class, "groupId", false, "GROUP_ID");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property RemarkName = new Property(5, String.class, "remarkName", false, "REMARK_NAME");
        public final static Property ShieldType = new Property(6, String.class, "shieldType", false, "SHIELD_TYPE");
        public final static Property QueueType = new Property(7, String.class, "queueType", false, "QUEUE_TYPE");
        public final static Property DisturbType = new Property(8, String.class, "disturbType", false, "DISTURB_TYPE");
        public final static Property NickName = new Property(9, String.class, "nickName", false, "NICK_NAME");
        public final static Property TopType = new Property(10, String.class, "topType", false, "TOP_TYPE");
        public final static Property HeadImg = new Property(11, String.class, "headImg", false, "HEAD_IMG");
        public final static Property Created = new Property(12, String.class, "created", false, "CREATED");
        public final static Property Modified = new Property(13, String.class, "modified", false, "MODIFIED");
        public final static Property RecordTime = new Property(14, String.class, "recordTime", false, "RECORD_TIME");
    }


    public UserRelationDao(DaoConfig config) {
        super(config);
    }
    
    public UserRelationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_RELATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"FRIEND_ID\" TEXT," + // 2: friendId
                "\"GROUP_ID\" TEXT," + // 3: groupId
                "\"STATUS\" TEXT," + // 4: status
                "\"REMARK_NAME\" TEXT," + // 5: remarkName
                "\"SHIELD_TYPE\" TEXT," + // 6: shieldType
                "\"QUEUE_TYPE\" TEXT," + // 7: queueType
                "\"DISTURB_TYPE\" TEXT," + // 8: disturbType
                "\"NICK_NAME\" TEXT," + // 9: nickName
                "\"TOP_TYPE\" TEXT," + // 10: topType
                "\"HEAD_IMG\" TEXT," + // 11: headImg
                "\"CREATED\" TEXT," + // 12: created
                "\"MODIFIED\" TEXT," + // 13: modified
                "\"RECORD_TIME\" TEXT);"); // 14: recordTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_RELATION_USER_ID_DESC_FRIEND_ID_DESC ON \"USER_RELATION\"" +
                " (\"USER_ID\" DESC,\"FRIEND_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_RELATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserRelation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(4, groupId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        String remarkName = entity.getRemarkName();
        if (remarkName != null) {
            stmt.bindString(6, remarkName);
        }
 
        String shieldType = entity.getShieldType();
        if (shieldType != null) {
            stmt.bindString(7, shieldType);
        }
 
        String queueType = entity.getQueueType();
        if (queueType != null) {
            stmt.bindString(8, queueType);
        }
 
        String disturbType = entity.getDisturbType();
        if (disturbType != null) {
            stmt.bindString(9, disturbType);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(10, nickName);
        }
 
        String topType = entity.getTopType();
        if (topType != null) {
            stmt.bindString(11, topType);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(12, headImg);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(13, created);
        }
 
        String modified = entity.getModified();
        if (modified != null) {
            stmt.bindString(14, modified);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(15, recordTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserRelation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(4, groupId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        String remarkName = entity.getRemarkName();
        if (remarkName != null) {
            stmt.bindString(6, remarkName);
        }
 
        String shieldType = entity.getShieldType();
        if (shieldType != null) {
            stmt.bindString(7, shieldType);
        }
 
        String queueType = entity.getQueueType();
        if (queueType != null) {
            stmt.bindString(8, queueType);
        }
 
        String disturbType = entity.getDisturbType();
        if (disturbType != null) {
            stmt.bindString(9, disturbType);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(10, nickName);
        }
 
        String topType = entity.getTopType();
        if (topType != null) {
            stmt.bindString(11, topType);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(12, headImg);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(13, created);
        }
 
        String modified = entity.getModified();
        if (modified != null) {
            stmt.bindString(14, modified);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(15, recordTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserRelation readEntity(Cursor cursor, int offset) {
        UserRelation entity = new UserRelation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // friendId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remarkName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shieldType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // queueType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // disturbType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nickName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // topType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // headImg
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // created
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // modified
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // recordTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserRelation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFriendId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemarkName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShieldType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQueueType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDisturbType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNickName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTopType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHeadImg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreated(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setModified(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRecordTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserRelation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserRelation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserRelation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
