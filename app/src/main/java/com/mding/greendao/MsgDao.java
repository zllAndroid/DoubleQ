package com.mding.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mding.dao.Msg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG".
*/
public class MsgDao extends AbstractDao<Msg, Long> {

    public static final String TABLENAME = "MSG";

    /**
     * Properties of entity Msg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property FriendId = new Property(2, String.class, "friendId", false, "FRIEND_ID");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
        public final static Property HeadImg = new Property(5, String.class, "headImg", false, "HEAD_IMG");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property Num = new Property(7, int.class, "num", false, "NUM");
        public final static Property Msg = new Property(8, String.class, "msg", false, "MSG");
        public final static Property IsShield = new Property(9, String.class, "isShield", false, "IS_SHIELD");
        public final static Property BannedType = new Property(10, String.class, "bannedType", false, "BANNED_TYPE");
        public final static Property AssistantType = new Property(11, String.class, "assistantType", false, "ASSISTANT_TYPE");
        public final static Property OperationType = new Property(12, String.class, "operationType", false, "OPERATION_TYPE");
        public final static Property TopType = new Property(13, String.class, "topType", false, "TOP_TYPE");
        public final static Property GroupNumMsg = new Property(14, String.class, "groupNumMsg", false, "GROUP_NUM_MSG");
    }


    public MsgDao(DaoConfig config) {
        super(config);
    }
    
    public MsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"FRIEND_ID\" TEXT," + // 2: friendId
                "\"TYPE\" TEXT," + // 3: type
                "\"NICK_NAME\" TEXT," + // 4: nickName
                "\"HEAD_IMG\" TEXT," + // 5: headImg
                "\"TIME\" TEXT," + // 6: time
                "\"NUM\" INTEGER NOT NULL ," + // 7: num
                "\"MSG\" TEXT," + // 8: msg
                "\"IS_SHIELD\" TEXT," + // 9: isShield
                "\"BANNED_TYPE\" TEXT," + // 10: bannedType
                "\"ASSISTANT_TYPE\" TEXT," + // 11: assistantType
                "\"OPERATION_TYPE\" TEXT," + // 12: operationType
                "\"TOP_TYPE\" TEXT," + // 13: topType
                "\"GROUP_NUM_MSG\" TEXT);"); // 14: groupNumMsg
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MSG_USER_ID_DESC_FRIEND_ID_DESC ON \"MSG\"" +
                " (\"USER_ID\" DESC,\"FRIEND_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(6, headImg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
        stmt.bindLong(8, entity.getNum());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(9, msg);
        }
 
        String isShield = entity.getIsShield();
        if (isShield != null) {
            stmt.bindString(10, isShield);
        }
 
        String bannedType = entity.getBannedType();
        if (bannedType != null) {
            stmt.bindString(11, bannedType);
        }
 
        String assistantType = entity.getAssistantType();
        if (assistantType != null) {
            stmt.bindString(12, assistantType);
        }
 
        String operationType = entity.getOperationType();
        if (operationType != null) {
            stmt.bindString(13, operationType);
        }
 
        String topType = entity.getTopType();
        if (topType != null) {
            stmt.bindString(14, topType);
        }
 
        String groupNumMsg = entity.getGroupNumMsg();
        if (groupNumMsg != null) {
            stmt.bindString(15, groupNumMsg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(6, headImg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
        stmt.bindLong(8, entity.getNum());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(9, msg);
        }
 
        String isShield = entity.getIsShield();
        if (isShield != null) {
            stmt.bindString(10, isShield);
        }
 
        String bannedType = entity.getBannedType();
        if (bannedType != null) {
            stmt.bindString(11, bannedType);
        }
 
        String assistantType = entity.getAssistantType();
        if (assistantType != null) {
            stmt.bindString(12, assistantType);
        }
 
        String operationType = entity.getOperationType();
        if (operationType != null) {
            stmt.bindString(13, operationType);
        }
 
        String topType = entity.getTopType();
        if (topType != null) {
            stmt.bindString(14, topType);
        }
 
        String groupNumMsg = entity.getGroupNumMsg();
        if (groupNumMsg != null) {
            stmt.bindString(15, groupNumMsg);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Msg readEntity(Cursor cursor, int offset) {
        Msg entity = new Msg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // friendId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headImg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.getInt(offset + 7), // num
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // msg
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // isShield
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // bannedType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // assistantType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // operationType
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // topType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // groupNumMsg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Msg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFriendId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNum(cursor.getInt(offset + 7));
        entity.setMsg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsShield(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBannedType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAssistantType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOperationType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTopType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGroupNumMsg(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Msg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Msg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Msg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
