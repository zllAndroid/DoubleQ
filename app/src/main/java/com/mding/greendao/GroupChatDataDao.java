package com.mding.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mding.dao.GroupChatData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_CHAT_DATA".
*/
public class GroupChatDataDao extends AbstractDao<GroupChatData, Long> {

    public static final String TABLENAME = "GROUP_CHAT_DATA";

    /**
     * Properties of entity GroupChatData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property GroupId = new Property(2, String.class, "groupId", false, "GROUP_ID");
        public final static Property FriendId = new Property(3, String.class, "friendId", false, "FRIEND_ID");
        public final static Property Message = new Property(4, String.class, "message", false, "MESSAGE");
        public final static Property ImgHead = new Property(5, String.class, "imgHead", false, "IMG_HEAD");
        public final static Property ImgGroup = new Property(6, String.class, "imgGroup", false, "IMG_GROUP");
        public final static Property NameGroup = new Property(7, String.class, "nameGroup", false, "NAME_GROUP");
        public final static Property NameFriend = new Property(8, String.class, "nameFriend", false, "NAME_FRIEND");
        public final static Property MessageType = new Property(9, String.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property UserMessageType = new Property(10, int.class, "userMessageType", false, "USER_MESSAGE_TYPE");
        public final static Property Created = new Property(11, String.class, "created", false, "CREATED");
        public final static Property SendState = new Property(12, int.class, "sendState", false, "SEND_STATE");
        public final static Property BannedType = new Property(13, String.class, "bannedType", false, "BANNED_TYPE");
        public final static Property DisturbType = new Property(14, String.class, "disturbType", false, "DISTURB_TYPE");
        public final static Property OperationType = new Property(15, String.class, "operationType", false, "OPERATION_TYPE");
        public final static Property TopType = new Property(16, String.class, "topType", false, "TOP_TYPE");
        public final static Property AssistantType = new Property(17, String.class, "assistantType", false, "ASSISTANT_TYPE");
    }


    public GroupChatDataDao(DaoConfig config) {
        super(config);
    }
    
    public GroupChatDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_CHAT_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"GROUP_ID\" TEXT," + // 2: groupId
                "\"FRIEND_ID\" TEXT," + // 3: friendId
                "\"MESSAGE\" TEXT," + // 4: message
                "\"IMG_HEAD\" TEXT," + // 5: imgHead
                "\"IMG_GROUP\" TEXT," + // 6: imgGroup
                "\"NAME_GROUP\" TEXT," + // 7: nameGroup
                "\"NAME_FRIEND\" TEXT," + // 8: nameFriend
                "\"MESSAGE_TYPE\" TEXT," + // 9: messageType
                "\"USER_MESSAGE_TYPE\" INTEGER NOT NULL ," + // 10: userMessageType
                "\"CREATED\" TEXT," + // 11: created
                "\"SEND_STATE\" INTEGER NOT NULL ," + // 12: sendState
                "\"BANNED_TYPE\" TEXT," + // 13: bannedType
                "\"DISTURB_TYPE\" TEXT," + // 14: disturbType
                "\"OPERATION_TYPE\" TEXT," + // 15: operationType
                "\"TOP_TYPE\" TEXT," + // 16: topType
                "\"ASSISTANT_TYPE\" TEXT);"); // 17: assistantType
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_GROUP_CHAT_DATA_USER_ID_DESC_GROUP_ID_DESC ON \"GROUP_CHAT_DATA\"" +
                " (\"USER_ID\" DESC,\"GROUP_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_CHAT_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupChatData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(4, friendId);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(5, message);
        }
 
        String imgHead = entity.getImgHead();
        if (imgHead != null) {
            stmt.bindString(6, imgHead);
        }
 
        String imgGroup = entity.getImgGroup();
        if (imgGroup != null) {
            stmt.bindString(7, imgGroup);
        }
 
        String nameGroup = entity.getNameGroup();
        if (nameGroup != null) {
            stmt.bindString(8, nameGroup);
        }
 
        String nameFriend = entity.getNameFriend();
        if (nameFriend != null) {
            stmt.bindString(9, nameFriend);
        }
 
        String messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindString(10, messageType);
        }
        stmt.bindLong(11, entity.getUserMessageType());
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(12, created);
        }
        stmt.bindLong(13, entity.getSendState());
 
        String bannedType = entity.getBannedType();
        if (bannedType != null) {
            stmt.bindString(14, bannedType);
        }
 
        String disturbType = entity.getDisturbType();
        if (disturbType != null) {
            stmt.bindString(15, disturbType);
        }
 
        String operationType = entity.getOperationType();
        if (operationType != null) {
            stmt.bindString(16, operationType);
        }
 
        String topType = entity.getTopType();
        if (topType != null) {
            stmt.bindString(17, topType);
        }
 
        String assistantType = entity.getAssistantType();
        if (assistantType != null) {
            stmt.bindString(18, assistantType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupChatData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(4, friendId);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(5, message);
        }
 
        String imgHead = entity.getImgHead();
        if (imgHead != null) {
            stmt.bindString(6, imgHead);
        }
 
        String imgGroup = entity.getImgGroup();
        if (imgGroup != null) {
            stmt.bindString(7, imgGroup);
        }
 
        String nameGroup = entity.getNameGroup();
        if (nameGroup != null) {
            stmt.bindString(8, nameGroup);
        }
 
        String nameFriend = entity.getNameFriend();
        if (nameFriend != null) {
            stmt.bindString(9, nameFriend);
        }
 
        String messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindString(10, messageType);
        }
        stmt.bindLong(11, entity.getUserMessageType());
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(12, created);
        }
        stmt.bindLong(13, entity.getSendState());
 
        String bannedType = entity.getBannedType();
        if (bannedType != null) {
            stmt.bindString(14, bannedType);
        }
 
        String disturbType = entity.getDisturbType();
        if (disturbType != null) {
            stmt.bindString(15, disturbType);
        }
 
        String operationType = entity.getOperationType();
        if (operationType != null) {
            stmt.bindString(16, operationType);
        }
 
        String topType = entity.getTopType();
        if (topType != null) {
            stmt.bindString(17, topType);
        }
 
        String assistantType = entity.getAssistantType();
        if (assistantType != null) {
            stmt.bindString(18, assistantType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupChatData readEntity(Cursor cursor, int offset) {
        GroupChatData entity = new GroupChatData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // friendId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // message
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imgHead
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imgGroup
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nameGroup
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nameFriend
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // messageType
            cursor.getInt(offset + 10), // userMessageType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // created
            cursor.getInt(offset + 12), // sendState
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // bannedType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // disturbType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // operationType
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // topType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // assistantType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupChatData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFriendId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImgHead(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImgGroup(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNameGroup(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNameFriend(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMessageType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserMessageType(cursor.getInt(offset + 10));
        entity.setCreated(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSendState(cursor.getInt(offset + 12));
        entity.setBannedType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDisturbType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOperationType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTopType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAssistantType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupChatData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupChatData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupChatData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
